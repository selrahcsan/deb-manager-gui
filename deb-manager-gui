#!/usr/bin/env python3

import sys
import subprocess
from PyQt6.QtWidgets import (
    QApplication, QWidget, QVBoxLayout, QLabel, QProgressBar, QMessageBox
)
from PyQt6.QtCore import Qt, QThread, pyqtSignal
import os


class AptWorker(QThread):
    progress = pyqtSignal(int)
    finished = pyqtSignal(bool, str)

    def __init__(self, packages, mode):
        super().__init__()
        self.packages = packages
        self.mode = mode

    def run(self):
        try:
            total = len(self.packages)
            progress_step = 100 // total
            current_progress = 0

            for pkg in self.packages:
                if self.mode == "install":
                    cmd = ['sudo', 'apt', 'install', '-y', pkg]
                    action_word = "Instalando"
                elif self.mode == "remove":
                    cmd = ['sudo', 'apt', 'remove', '-y', pkg]
                    action_word = "Removendo"
                elif self.mode == "deb_install":
                    # Instalação local de .deb
                    if not os.path.isfile(pkg):
                        self.finished.emit(False, f"Arquivo não encontrado: {pkg}")
                        return

                    cmd = ['sudo', 'dpkg', '-i', pkg]
                    action_word = "Instalando .deb"
                else:
                    self.finished.emit(False, f"Modo inválido: {self.mode}")
                    return

                self.progress.emit(current_progress)
                process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, text=True)

                for line in process.stdout:
                    print(line.strip())
                    step = 0
                    if "Lendo listas" in line:
                        step = 10
                    elif "Construindo árvore" in line:
                        step = 20
                    elif "Lendo informação" in line:
                        step = 30
                    elif action_word in line:
                        step = 60
                    elif "Configurando" in line or "Removido" in line:
                        step = 90

                    self.progress.emit(min(current_progress + int(step * progress_step / 100), 100))

                process.wait()

                # Corrigir dependências pendentes no caso de .deb
                if self.mode == "deb_install" and process.returncode != 0:
                    fix = subprocess.run(['sudo', 'apt', '-f', 'install', '-y'])
                    if fix.returncode != 0:
                        self.finished.emit(False, f"Erro ao corrigir dependências de {pkg}")
                        return

                if process.returncode != 0:
                    self.finished.emit(False, f"Erro ao processar: {pkg}")
                    return

                current_progress += progress_step

            self.progress.emit(100)
            self.finished.emit(True, ", ".join(self.packages))

        except Exception as e:
            self.finished.emit(False, str(e))


class ManagerWindow(QWidget):
    def __init__(self, packages, mode, custom_text=None):
        super().__init__()
        self.mode = mode
        action = "Instalando" if mode in ["install", "deb_install"] else "Removendo"
        self.setWindowTitle(f"{action} Pacotes")
        self.setFixedSize(460, 180)

        layout = QVBoxLayout()

        label_text = custom_text if custom_text else f"{action}: {', '.join(packages)}"

        self.label = QLabel(label_text)
        self.label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        layout.addWidget(self.label)

        self.progress_bar = QProgressBar()
        self.progress_bar.setValue(0)
        layout.addWidget(self.progress_bar)

        self.setLayout(layout)

        self.worker = AptWorker(packages, mode)
        self.worker.progress.connect(self.progress_bar.setValue)
        self.worker.finished.connect(self.on_finished)
        self.worker.start()

    def on_finished(self, success, message):
        action = "instalados" if self.mode in ["install", "deb_install"] else "removidos"
        if success:
            QMessageBox.information(self, "Sucesso", f"{message} {action} com sucesso!")
        else:
            QMessageBox.critical(self, "Erro", f"Falha: {message}")
        self.close()


def main():
    if len(sys.argv) < 3:
        print("Uso:")
        print("  --in <pacote1> [pacote2 ...]")
        print("  --rm <pacote1> [pacote2 ...]")
        print("  --deb <arquivo1.deb> [arquivo2.deb ...]")
        print("  [--tx mensagem personalizada]")
        sys.exit(1)

    # Detecta --tx
    if '--tx' in sys.argv:
        tx_index = sys.argv.index('--tx')
        custom_text = " ".join(sys.argv[tx_index + 1:])
        args = sys.argv[1:tx_index]
    else:
        custom_text = None
        args = sys.argv[1:]

    if len(args) < 2:
        print("Erro: argumentos insuficientes.")
        sys.exit(1)

    option = args[0]
    packages = args[1:]

    if option == '--in':
        mode = "install"
    elif option == '--rm':
        mode = "remove"
    elif option == '--deb':
        mode = "deb_install"
    else:
        print("Opção inválida!")
        sys.exit(1)

    app = QApplication(sys.argv)
    window = ManagerWindow(packages, mode, custom_text)
    window.show()
    sys.exit(app.exec())


if __name__ == "__main__":
    main()
